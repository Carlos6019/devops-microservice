name: build and deploy

on:
  push:
    branches: master

env:
  AWS_REGION: us-east-1
  ECR_REPO: devops-microservice
  CLUSTER_NAME: devops-eks-cluster
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build:
    name: Build-plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init

      - name: Terraform Validate
        run: |
          terraform validate

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan
        id: plan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan

      - name: Terraform Destroy
        run: terraform destroy -auto-approve

  deploy:
    needs: build
    name: Deploy-plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .

      - name: Terraform Apply
        #run: terraform apply tfplan
        run: terraform destroy tfplan

  deploy-app:
    needs: deploy
    name: Build, Push Docker & Deploy to EKS
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPO:latest ./microservice
          docker tag $ECR_REPO:latest $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG

      - name: Push Docker image
        run: docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG

      - name: Setup kubeconfig for EKS
        run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Apply namespace manifest
        run: kubectl apply -f k8s/microservice/namespace.yaml

      - name: Update deployment manifest image tag
        run: sed -i "s|IMAGE_PLACEHOLDER|$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG|g" k8s/microservice/deployment.yaml

      - name: Deploy to EKS
        run: kubectl apply -f k8s/microservice/
